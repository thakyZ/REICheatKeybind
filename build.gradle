plugins {
  id("fabric-loom") version("0.6-SNAPSHOT")
  id("maven-publish")
  id("java")
  id("java-library")
  id("com.matthewprenger.cursegradle") version("1.4.0")
}

import java.text.SimpleDateFormat

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

group = maven_group
archivesBaseName = mod_id
version = "${mod_version}+${minecraft_version}"

apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'

repositories {
  maven { url "https://maven.modmuss50.me/" }
  maven { url "https://maven.shedaniel.me/" }
  maven { url 'https://www.cursemaven.com' }
}

processResources {
  filesMatching('fabric.mod.json') {
    expand(
        'mod_version': mod_version,
        'minecraft_version': minecraft_version,
        'dep_minecraft_version': dep_minecraft_version,
        'dep_loader_version': dep_loader_version,
        'dep_fabric_version': dep_fabric_version
    )
  }
  inputs.properties(
      'mod_version': mod_version,
      'minecraft_version': minecraft_version,
      'dep_minecraft_version': dep_minecraft_version,
      'dep_loader_version': dep_loader_version,
      'dep_fabric_version': dep_fabric_version
  )
}

jar {
  from rootProject.file("LICENSE")
  exclude("**/*.ase")
  exclude("**/*.blend")
  exclude("**/*.blend1")
  exclude("**/command_block_back.png")
  exclude("**/command_block_icon.png")
}

dependencies {
  //to change the versions see the gradle.properties file
  minecraft "com.mojang:minecraft:${minecraft_version}"
  mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2"
  modApi("net.fabricmc:fabric-loader:${loader_version}")
  modApi(fabricApi.module("fabric-api-base", fabric_api_version))
  include(fabricApi.module("fabric-api-base", fabric_api_version))
  modApi(fabricApi.module("fabric-resource-loader-v0", fabric_api_version))
  modApi(fabricApi.module("fabric-networking-v0", fabric_api_version))
  modApi(fabricApi.module("fabric-lifecycle-events-v1", fabric_api_version))
  modApi(fabricApi.module("fabric-rendering-fluids-v1", fabric_api_version))
  modApi("me.shedaniel:RoughlyEnoughItems:${rei_version}") {
    exclude(module: "fabric-api")
  }
  modRuntime("curse.maven:roughly-searchable-392023:${roughly_searchable_version}") {
    transitive(false)
  }
  modApi("org.jetbrains:annotations:19.0.0")
  modCompileOnly('com.google.code.findbugs:jsr305:3.0.2') {
    transitive(false)
  }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier("sources")
  from sourceSets.main.allSource
}

runClient {
  args = ['--username', 'Dev']
}

minecraft {
  refmapName = "${mod_id}-refmap.json"
}

def releaseChangelog = "No changelog"

/* Thank you modmenu & fablabs */
task releaseOnCf {
  def df = new SimpleDateFormat("yyyy-MM-dd HH:mm")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  def branch
  if (System.env.BRANCH_NAME) {
    branch = System.env.BRANCH_NAME
    branch = branch.substring(branch.lastIndexOf("/") + 1)
  } else {
    branch = "git rev-parse --abbrev-ref HEAD".execute().in.text.trim()
  }
  if (branch == "HEAD") {
    branch = "git rev-parse --short HEAD".execute().in.text.trim()
  }
  def time = df.format(new Date())
  def changes = new StringBuilder()
  changes << "<h2>REI v${mod_version} for $dep_minecraft_version</h2>Updated at <b>$time</b>.<br><a href=\"https://www.github.com/shedaniel/RoughlyEnoughItems/commits/$branch\">Click here for changelog</a>"
  def proc = "git log --max-count=200 --pretty=format:%s".execute()
  proc.in.eachLine { line ->
    def processedLine = line.toString()
    if (!processedLine.contains("New translations") && !processedLine.contains("Merge") && !processedLine.contains("branch")) {
      changes << "<br>- ${processedLine.capitalize()}"
    }
  }
  proc.waitFor()
  releaseChangelog = changes.toString()
  dependsOn tasks.getByName("curseforge")
}

curseforge {
  if (System.getenv('thakyz_curse_api_key') != null || System.getenv('thakyz_curse_api_key') != null) {
    apiKey = project.hasProperty('thakyz_curse_api_key') ? project.property('thakyz_curse_api_key') : System.getenv('thakyz_curse_api_key')
    //noinspection GroovyAssignabilityCheck
    project {
      id = "406246"
      releaseType = "release"
      changelogType = "html"
      changelog = releaseChangelog
      addGameVersion "1.16.5"
      addGameVersion "1.16.4"
      addGameVersion "Fabric"
      addGameVersion "Java 8"
      relations {
        requiredDependency "fabric-api"
        requiredDependency "roughly-enough-items"
      }
      mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar")) {
        displayName = "[Fabric $project.minecraft_version] v$project.version"
      }
      addArtifact(file("${project.buildDir}/libs/${mod_id}-${project.version}-sources.jar")) {
        displayName = "[Fabric $project.minecraft_version] v$project.version Sources"
      }
      afterEvaluate {
        uploadTask.dependsOn("build")
      }
    }
    options {
      forgeGradleIntegration = false
      debug = 'true'.equalsIgnoreCase(upload_debug)
    }
  }
  options {
    forgeGradleIntegration = false
    javaVersionAutoDetect = false
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact(sourcesJar) {
        builtBy remapSourcesJar
      }
      pom.withXml {
        def depsNode = asNode().appendNode("dependencies")
        subprojects.each {
          def depNode = depsNode.appendNode("dependency")
          depNode.appendNode("groupId", it.group)
          depNode.appendNode("artifactId", it.name)
          depNode.appendNode("version", it.version)
          depNode.appendNode("scope", "compile")
        }
      }
      artifactId = mod_id
      artifact(remapJar) {
        builtBy remapJar
      }
      artifact(sourcesJar) {
        classifier = 'sources'
        builtBy remapSourcesJar
      }
    }
  }

  repositories {
    maven {
      url "https://www.cursemaven.com/"
    }
  }
}